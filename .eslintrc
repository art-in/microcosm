{
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",

        // prettier formatting rules (has no code quality rules).
        // turns off eslint rules which are in conflict.
        "plugin:prettier/recommended"
    ],
    "parser": "babel-eslint",
    "plugins": [
        "babel"
    ],
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "env": {
        "browser": true
    },
    "globals": {
        "process": false,
        "Promise": false,
        "Symbol": false,
        "Proxy": false,
        "Set": false,
        "WeakSet": false,
        "Map": false,
        "WeakMap": false
    },
    "rules": {
        // turn on prettier formatting rules
        // TODO: line limit 80 is not respected in comments (+ in imports)
        "prettier/prettier": ["error", {
            // spaces add to line width, and sometimes look very ugly
            // (eg. nested destructuring: "{vm: { main: { mindset } } } }")
            "bracketSpacing": false,

            // single quotes make bit less visual noise than double quotes
            // TODO: single quotes are not respected in jsx
            "singleQuote": true
        }],

        // since this is not a lib to embed into another project
        // and make noise there, i feel free to log anything
        "no-console": 0,

        // enforce to use 'const' over 'let' to follow spec meaning
        "prefer-const": ["error"],

        "no-unused-vars": ["error", {

            // 1. allow unused vars with 'Type' in name, since they really
            //    used in jsdoc type annotations, but eslint does not support
            //    jsdoc as a valid 'use' for vars
            //    https://github.com/eslint/eslint/issues/2813
            // 2. allow unused vars with 'unrested' in name, to remove
            //    props from rest`ed object while destructuring
            //    (eg. we do not want 'someProp' to appear in 'rest' object:
            //    'const {someProp: unrested, ...rest} = obj')
            "varsIgnorePattern": "(.+Type$|^unrested\\d?$)"
        }],

        // jsdoc annotations force to describe argument types
        "valid-jsdoc": ["error", {
            "prefer": {"returns": "return"},
            // only require 'return' if there is return statement
            "requireReturn": false,
            "requireParamDescription": false,
            "requireReturnDescription": false
        }],
        "require-jsdoc": ["error", {
            "require": {
                "FunctionDeclaration": true,
                "MethodDefinition": true,
                "ClassDeclaration": true,

                // TODO: enable
                "ArrowFunctionExpression": false,
                "FunctionExpression": false
            }
        }],

        // ignore 'propTypes' since using static prop validation
        "react/prop-types": 0
    }
}